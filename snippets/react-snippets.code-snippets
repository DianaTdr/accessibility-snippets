{
    "DialogAria": {
        "prefix": [
            "DialogAria",
        ],
        "body": [
            "role='dialog'",
            "aria-labelledby='$2'",
            "aria-describedby='$1'",
            "aria-modal={true}",
            ""
        ],
        "description": "Adds aria attributes for a dialog. A dialog is a window separate from the rest of the webpage like a modal."
    },
    "AlertAria": {
        "prefix": [
            "AlertAria",
        ],
        "body": [
            "role='alert'",
            "aria-live='$1'",
            "aria-atomic={$0}",
            ""
        ],
        "description": "Add `role='alert'` to a node containing an alert message. Setting role='alert' automatically sets aria-live='assertive' and aria-atomic='true'."
    },
    "AlertDialogAria": {
        "prefix": [
            "AlertDialogAria",
        ],
        "body": [
            "role='alertdialog'",
            "aria-labelledby='$1'",
            "aria-describedby='$0'",
            "aria-modal={true}",
            ""
        ],
        "description": "alertDialog - Add `role='alertDialog'` when an alert is urgent and demands immediate attention. Only use alertDialog when the alert message has associated interactive controls."
    },
    "FeedAria": {
        "prefix": [
            "FeedAria",
        ],
        "body": [
            "role='feed'",
            "aria-labelledby='$1'",
            "aria-busy={$0}",
            ""
        ],
        "description": "Add `role='feed'` to a dynamic list of articles. Add `aria-busy` if articles are being loaded or have been removed from the feed."
    },
    "ArticleAria": {
        "prefix": [
            "ArticleAria",
        ],
        "body": [
            "role='article'",
            "tabindex={0}",
            "aria-labelledby='$3'",
            "aria-describedby='$2'",
            "aria-posinset={$1}",
            "aria-setsize={$0}",
            ""
        ],
        "description": "Add `role='article'` to a node that can easily stand on its own separate from the main content of the page. An example is a newspaper article or a forum post. Use `aria-posinset` to indicate of the article within the feed. Use `aria-setsize` to indicate how many articles are in the feed."
    },
    "ButtonAria": {
        "prefix": [
            "ButtonAria",
        ],
        "body": [
            "role='button'",
            "tabindex={0}",
            "aria-pressed={$1}",
            "aria-expanded={$0}",
            ""
        ],
        "description": "Add `role='button'` on a clickable element that triggers a response when activated by a user. Add `aria-pressed` when a button can toggle 'on' or 'off'. Add `aria-expanded` if a button triggers another node to expand or collapse."
    },
    "CheckboxAria": {
        "prefix": [
            "CheckboxAria",
        ],
        "body": [
            "role='checkbox'",
            "tabindex={0}",
            "aria-checked={$0}",
            ""
        ],
        "description": "Add `role='checkbox'` to a checkable interactive control. Add `aria-checked` to indicate the state of the checkbox."
    },
    "LinkAria": {
        "prefix": [
            "LinkAria",
        ],
        "body": [
            "role='link'",
            "tabindex={0}",
            "alt='$1'", // Defines the accessible name of the link.
            "aria-label='$0'", // Defines the accessible name of the link.
            ""
        ],
        "description": "Add `role='link'` to elements that act as hyperlinks. Ensure the link can be navigated to via the keyboard. If the link role is added to an image add `alt` text. Add an `aria-label` if the link does not provide a descriptive text label."
    },
    "RadioAria": {
        "prefix": [
            "RadioAria",
        ],
        "body": [
            "role='radio'",
            "tabindex={$0}",
            "aria-checked={$0}",
            ""
        ],
        "description": "Add `role='radio'` to a checkable interactive control. Use radio in place of checkbox if only one item in a group can be checked. Add `aria-checked` to indicate the state of the checkbox."
    },
    "SliderAria": {
        "prefix": [
            "SliderAria",
        ],
        "body": [
            "role='slider'",
            "tabindex={0}",
            "aria-orientation='$5'",
            "aria-valuemax={$4}",
            "aria-valuemin={$3}",
            "aria-valuenow={$2}",
            "aria-valuetext='$1'",
            "aria-labelledby='$0'",
            ""
        ],
        "description": "Add `role='slider'` to allow users to select from a certain range. Add `aria-orientation` to indicate what direction the slider is oriented in. Add `aria-valuemin` to indicate the minimum value. Add `aria-valuemax` to indicate the maximum value. Add `aria-valuenow` to indicate the current value. If the value is not represented by a number add `aria-valuetext` in place of aria-valuenow."
    },
    "ComboboxAria": {
        "prefix": [
            "ComboboxAria",
        ],
        "body": [
            "role='combobox'",
            "aria-haspopup='$2'",
            "aria-owns='$1'",
            "aria-expanded={$0}",
            ""
        ],
        "description": "Add `role='combobox'` to a composite widget containing a single-line textbox and another element such as listbox. Add `aria-haspopup` if the combobox contains a popup. Add `aria-expanded` if the combobox expands or collapses a node. Add `aria-owns` to indicate which elements the combobox owns."
    },
    "TextboxAria": {
        "prefix": [
            "TextboxAria",
        ],
        "body": [
            "role='textbox'",
            "aria-activedescendant='$6'",
            "aria-multiline={$5}",
            "aria-required={$4}",
            "aria-readonly={$3}",
            "aria-labelledby='$2'",
            "aria-placeholder='$1'",
            "aria-autocomplete='$0'",
            ""
        ],
        "description": "Use `role='textbox'` on elements that allow input of free-form text. Add `aria-activedescendant` to indicate the current active child (for example if the textbox has an autocomplete popup and the focus changes to the popup). Add `aria-autocomplete` to indicate if the textbox will display a list of suggestions. Use `aria-multiline` if the textbox can contain multiple lines of input. Add `aria-placeholder` to give users a hint of what the input should contain. Add `aria-readonly` if the user cannot modify the value. Add `aria-required` if the field is required."
    },
    "SwitchAria": {
        "prefix": [
            "SwitchAria",
        ],
        "body": [
            "role='switch'",
            "aria-checked={$1}",
            "aria-readonly={$0}",
            ""
        ],
        "description": "Use `role='switch'` on checkboxes that represent an 'on' or 'off' state. Add `aria-checked` to indicate whether component is on or off. Add `aria-required` if the field is required."
    }
}